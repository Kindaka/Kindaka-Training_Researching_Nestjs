import { Injectable, CanActivate, ExecutionContext, ForbiddenException, BadRequestException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { UserService } from 'src/user/user.service';

@Injectable()
export class AuthGuard implements CanActivate {
  constructor(private jwtService: JwtService, private userService: UserService) {}

  async canActivate(context: ExecutionContext): Promise<boolean> {
    const request = context.switchToHttp().getRequest();
    console.log('1Ô∏è‚É£ ƒêang ki·ªÉm tra AuthGuard...');

    try {
      // 1Ô∏è‚É£ Ki·ªÉm tra Authorization Header
      const authHeader = request.headers.authorization;
      console.log('üõ† Authorization Header:', authHeader);
      if (!authHeader || !authHeader.startsWith('Bearer ')) {
        throw new ForbiddenException('Token kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu');
      }
      const token = authHeader.split(' ')[1];
      console.log('üîë Token nh·∫≠n ƒë∆∞·ª£c:', token);

      // 2Ô∏è‚É£ Ki·ªÉm tra JWT_SECRET
      console.log('üîê JWT_SECRET:', process.env.JWT_SECRET);
      if (!process.env.JWT_SECRET) {
        throw new Error('JWT_SECRET kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a');
      }

      // 3Ô∏è‚É£ Verify Token
      const payload = await this.jwtService.verifyAsync(token, {
        secret: process.env.JWT_SECRET,
      });
      console.log('‚úÖ Token Payload:', payload);

      // 4Ô∏è‚É£ Ki·ªÉm tra user t·ª´ database
      const user = await this.userService.findByEmail(payload.email);
      console.log('üë§ User found:', user);
      if (!user) {
        throw new BadRequestException('User kh√¥ng ph√π h·ª£p v·ªõi token');
      }

      // 5Ô∏è‚É£ G√°n user v√†o request
      request.currentUser = user;
      return true;

    } catch (error) {
      console.error('‚ùå L·ªói AuthGuard:', error.message);
      throw new ForbiddenException('Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }
  }
}
